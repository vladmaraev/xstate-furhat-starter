import { Subscribable, ActorLogic, EventObject, Subscription, AnyActorSystem, ActorRefFrom, Snapshot, HomomorphicOmit } from "../types.js";
export type ObservableSnapshot<TContext, TInput> = Snapshot<undefined> & {
    context: TContext | undefined;
    input: TInput | undefined;
    _subscription: Subscription | undefined;
};
export type ObservablePersistedState<TContext, TInput> = HomomorphicOmit<ObservableSnapshot<TContext, TInput>, '_subscription'>;
export type ObservableActorLogic<TContext, TInput> = ActorLogic<ObservableSnapshot<TContext, TInput>, {
    type: string;
    [k: string]: unknown;
}, TInput, ObservablePersistedState<TContext, TInput>, AnyActorSystem>;
export type ObservableActorRef<TContext> = ActorRefFrom<ObservableActorLogic<TContext, any>>;
export declare function fromObservable<TContext, TInput>(observableCreator: ({ input, system }: {
    input: TInput;
    system: AnyActorSystem;
    self: ObservableActorRef<TContext>;
}) => Subscribable<TContext>): ObservableActorLogic<TContext, TInput>;
/**
 * Creates event observable logic that listens to an observable
 * that delivers event objects.
 *
 *
 * @param lazyObservable A function that creates an observable
 * @returns Event observable logic
 */
export declare function fromEventObservable<T extends EventObject, TInput>(lazyObservable: ({ input, system }: {
    input: TInput;
    system: AnyActorSystem;
    self: ObservableActorRef<T>;
}) => Subscribable<T>): ObservableActorLogic<T, TInput>;
