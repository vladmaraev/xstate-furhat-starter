import { ActorLogic, ActorRefFrom, ActorSystem, AnyActorSystem, Snapshot } from "../types.js";
import { XSTATE_STOP } from "../constants.js";
export type PromiseSnapshot<TOutput, TInput> = Snapshot<TOutput> & {
    input: TInput | undefined;
};
declare const resolveEventType = "$$xstate.resolve";
declare const rejectEventType = "$$xstate.reject";
export type PromiseActorEvents<T> = {
    type: typeof resolveEventType;
    data: T;
} | {
    type: typeof rejectEventType;
    data: any;
} | {
    type: typeof XSTATE_STOP;
};
export type PromiseActorLogic<TOutput, TInput = unknown> = ActorLogic<PromiseSnapshot<TOutput, TInput>, {
    type: string;
    [k: string]: unknown;
}, TInput, // input
PromiseSnapshot<TOutput, TInput>, // persisted state
ActorSystem<any>>;
export type PromiseActorRef<TOutput> = ActorRefFrom<PromiseActorLogic<TOutput, unknown>>;
export declare function fromPromise<TOutput, TInput = unknown>(promiseCreator: ({ input, system }: {
    input: TInput;
    system: AnyActorSystem;
    self: PromiseActorRef<TOutput>;
}) => PromiseLike<TOutput>): PromiseActorLogic<TOutput, TInput>;
export {};
