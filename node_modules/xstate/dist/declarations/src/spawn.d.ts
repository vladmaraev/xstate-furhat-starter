import { ActorRefFrom, AnyActorContext, AnyActorLogic, AnyActorRef, AnyEventObject, AnyState, InputFrom, IsLiteralString, ProvidedActor } from "./types.js";
type SpawnOptions<TActor extends ProvidedActor, TSrc extends TActor['src']> = TActor extends {
    src: TSrc;
} ? 'id' extends keyof TActor ? [
    options: {
        id: TActor['id'];
        systemId?: string;
        input?: InputFrom<TActor['logic']>;
        syncSnapshot?: boolean;
    }
] : [
    options?: {
        id?: string;
        systemId?: string;
        input?: InputFrom<TActor['logic']>;
        syncSnapshot?: boolean;
    }
] : never;
export type Spawner<TActor extends ProvidedActor> = IsLiteralString<TActor['src']> extends true ? <TSrc extends TActor['src']>(logic: TSrc, ...[options]: SpawnOptions<TActor, TSrc>) => ActorRefFrom<(TActor & {
    src: TSrc;
})['logic']> : <TLogic extends AnyActorLogic | string>(src: TLogic, options?: {
    id?: string;
    systemId?: string;
    input?: unknown;
    syncSnapshot?: boolean;
}) => TLogic extends string ? AnyActorRef : ActorRefFrom<TLogic>;
export declare function createSpawner(actorContext: AnyActorContext, { machine, context }: AnyState, event: AnyEventObject, spawnedChildren: Record<string, AnyActorRef>): Spawner<any>;
export {};
