import { Spawner } from "../spawn.js";
import type { ActionArgs, AnyEventObject, Assigner, EventObject, LowInfer, MachineContext, ParameterizedObject, PropertyAssigner, ProvidedActor } from "../types.js";
export interface AssignArgs<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject, TActor extends ProvidedActor> extends ActionArgs<TContext, TExpressionEvent, TExpressionAction, TEvent> {
    spawn: Spawner<TActor>;
}
export interface AssignAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject, TActor extends ProvidedActor> {
    (_: ActionArgs<TContext, TExpressionEvent, TExpressionAction, TEvent>): void;
    _out_TActor?: TActor;
}
/**
 * Updates the current context of the machine.
 *
 * @param assignment An object that represents the partial context to update.
 */
export declare function assign<TContext extends MachineContext, TExpressionEvent extends AnyEventObject = AnyEventObject, // TODO: consider using a stricter `EventObject` here
TExpressionAction extends ParameterizedObject | undefined = ParameterizedObject | undefined, TEvent extends EventObject = EventObject, TActor extends ProvidedActor = ProvidedActor>(assignment: Assigner<LowInfer<TContext>, TExpressionEvent, TExpressionAction, TEvent, TActor> | PropertyAssigner<LowInfer<TContext>, TExpressionEvent, TExpressionAction, TEvent, TActor>): AssignAction<TContext, TExpressionEvent, TExpressionAction, TEvent, TActor>;
