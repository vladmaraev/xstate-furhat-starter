import { EventObject, MachineContext, ActionArgs, ParameterizedObject } from "../types.js";
type ResolvableSendId<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject> = string | ((args: ActionArgs<TContext, TExpressionEvent, TExpressionAction, TEvent>) => string);
export interface CancelAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject> {
    (_: ActionArgs<TContext, TExpressionEvent, TExpressionAction, TEvent>): void;
}
/**
 * Cancels an in-flight `send(...)` action. A canceled sent action will not
 * be executed, nor will its event be sent, unless it has already been sent
 * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
 *
 * @param sendId The `id` of the `send(...)` action to cancel.
 */
export declare function cancel<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject>(sendId: ResolvableSendId<TContext, TExpressionEvent, TExpressionAction, TEvent>): CancelAction<TContext, TExpressionEvent, TExpressionAction, TEvent>;
export {};
