import { ActionArgs, EventObject, LogExpr, MachineContext, ParameterizedObject } from "../types.js";
type ResolvableLogValue<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject> = string | LogExpr<TContext, TExpressionEvent, TExpressionAction, TEvent>;
export interface LogAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject> {
    (_: ActionArgs<TContext, TExpressionEvent, TExpressionAction, TEvent>): void;
}
/**
 *
 * @param expr The expression function to evaluate which will be logged.
 *  Takes in 2 arguments:
 *  - `ctx` - the current state context
 *  - `event` - the event that caused this action to be executed.
 * @param label The label to give to the logged expression.
 */
export declare function log<TContext extends MachineContext, TExpressionEvent extends EventObject, TExpressionAction extends ParameterizedObject | undefined, TEvent extends EventObject>(value?: ResolvableLogValue<TContext, TExpressionEvent, TExpressionAction, TEvent>, label?: string): LogAction<TContext, TExpressionEvent, TExpressionAction, TEvent>;
export {};
